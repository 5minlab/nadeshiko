// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../ioredis
//   ../express
//   ../googleapis-common

declare module 'nadeshiko' {
    export { makeRouter, } from 'nadeshiko/router';
    export { TableCache, } from 'nadeshiko/cache';
    import Redis from 'ioredis';
    import { RecordType } from 'nadeshiko/sheets';
    import * as C from 'nadeshiko/controllers';
    export const Controller: typeof C;
    export class Nadeshiko {
        constructor(redis: Redis.Redis, prefix: string);
        key(ty: string): string;
        mget<T extends RecordType>(ty: string): Promise<T[]>;
        get<T extends RecordType>(ty: string, id: number | string): Promise<T>;
    }
}

declare module 'nadeshiko/router' {
    import Redis from 'ioredis';
    import express from 'express';
    import { ServiceKey } from 'nadeshiko/datasource/gsheet';
    interface Options {
        metadataSheetId: string;
        redis: Redis.Redis;
        dataPath: string;
        serviceKey: ServiceKey;
        prefix?: string;
    }
    export const makeRouter: (options: Options) => express.Router;
    export {};
}

declare module 'nadeshiko/cache' {
    import Redis from 'ioredis';
    import { RecordType, Table, Metadata } from 'nadeshiko/sheets';
    export const makeTableKey: (prefix: string, table: string) => string;
    export class TableCache {
        constructor(redis: Redis.Redis, prefix: string);
        mset<T extends RecordType>(name: string, items: T[]): Promise<void>;
        mget<T extends RecordType>(name: string): Promise<T[]>;
        get<T extends RecordType>(name: string, id: number | string): Promise<T | undefined>;
        saveTable<T extends RecordType>(table: Table<T>): Promise<void>;
        loadTable<T extends RecordType>(name: string): Promise<Table<T>>;
        dropTable(name: string): Promise<boolean>;
        saveMetadata(metadata: Metadata): Promise<void>;
        touchVersion(): Promise<void>;
        loadMetadata(): Promise<Metadata>;
        dropMetadata(): Promise<void>;
    }
}

declare module 'nadeshiko/sheets' {
    export * from 'nadeshiko/sheets/Sheet';
    export * from 'nadeshiko/sheets/Reference';
    export * from 'nadeshiko/sheets/Constraint';
    export * from 'nadeshiko/sheets/Attribute';
    export * from 'nadeshiko/sheets/Metadata';
    export * from 'nadeshiko/sheets/Table';
    export * from 'nadeshiko/sheets/Record';
}

declare module 'nadeshiko/controllers' {
    import { TableCache } from 'nadeshiko/cache';
    import { DataSource } from 'nadeshiko/datasource';
    import { Metadata, Table, RecordType } from 'nadeshiko/sheets';
    export const getMetadata: (cache: TableCache) => Promise<Metadata>;
    export const getTable: <T extends RecordType>(cache: TableCache, name: string) => Promise<Table<T>>;
    export const delTable: (cache: TableCache, name: string) => Promise<boolean>;
    export const getRecord: (cache: TableCache, name: string, id: string | number) => Promise<RecordType>;
    export const syncTable: (cache: TableCache, ds: DataSource, name: string) => Promise<boolean>;
    export const fetchAll: (datasource: DataSource, dataPath: string) => Promise<{
        version: string;
        metadata: Metadata;
    }>;
    export const loadAll: (cache: TableCache, dataPath: string, version: string) => Promise<{
        tables: string[];
        metadata: Metadata;
    }>;
    export const getVersions: (dataPath: string, limit: number) => Promise<string[]>;
    export const getVersionInfo: (dataPath: string, version: string) => Promise<{
        metadata: string[];
        contents: string[];
    }>;
}

declare module 'nadeshiko/datasource/gsheet' {
    import { Reference, Sheet } from 'nadeshiko/sheets';
    import { OAuth2Client } from 'googleapis-common';
    import { DataSource } from 'nadeshiko/datasource/base';
    export class GSheetDataSource implements DataSource {
        constructor(auth: OAuth2Client, metadataSheetId: string);
        fetchReferences(): Promise<string[][]>;
        fetchConstraints(): Promise<string[][]>;
        fetchSheets(refs: Reference[]): Promise<Sheet[]>;
    }
    export interface ServiceKey {
        private_key: string;
        client_email: string;
    }
    export const getJWTClient: (serviceKey: ServiceKey) => Promise<OAuth2Client>;
}

declare module 'nadeshiko/sheets/Sheet' {
    export const getTableName: (r: string) => string;
    export const sanitizeRange: (r: string) => string;
    export interface Sheet {
        name: string;
        values: string[][];
    }
}

declare module 'nadeshiko/sheets/Reference' {
    export interface Reference {
        table: string;
        range: string;
        sheet: string;
    }
    export const toDataRange: (ref: Reference) => string;
    export const makeReference: (row: string[]) => Reference;
    export const makeReferences: (values: string[][]) => Reference[];
}

declare module 'nadeshiko/sheets/Constraint' {
    export enum ConstraintType {
        ForeignKey = "fk",
        Unique = "unique"
    }
    export interface Constraint {
        type: ConstraintType;
        firstTable: string;
        firstAttribute: string;
        secondTable: string;
        secondAttribute: string;
    }
    export const makeConstraint: (row: string[]) => Constraint;
    export const makeConstraints: (values: string[][]) => Constraint[];
    export class ConstraintTable {
        constructor(constraints: Constraint[]);
    }
}

declare module 'nadeshiko/sheets/Attribute' {
    export enum AttributeType {
        Integer = 0,
        Float = 1,
        String = 2,
        Boolean = 3,
        Date = 4,
        Raw = 5
    }
    export type AttributeValueType = (number | boolean | Date | string | null | undefined);
    export class Attribute {
        readonly ty: AttributeType;
        readonly name: string;
        constructor(ty: AttributeType, name: string);
        static make(s: string): Attribute;
        cast(v: string | undefined): string | number | boolean | Date | null | undefined;
    }
    export const makeAttributes: (row: string[]) => Attribute[];
}

declare module 'nadeshiko/sheets/Metadata' {
    import { Constraint } from 'nadeshiko/sheets/Constraint';
    import { Reference } from 'nadeshiko/sheets/Reference';
    export class Metadata {
        readonly version: string;
        readonly references: Reference[];
        readonly constraints: Constraint[];
        constructor(version: string, references: Reference[], constraints: Constraint[]);
        save(dataPath: string): Promise<[void, void]>;
        findReference(table: string): Reference | undefined;
    }
}

declare module 'nadeshiko/sheets/Table' {
    import { RecordType } from 'nadeshiko/sheets/Record';
    export class Table<T extends RecordType> {
        readonly name: string;
        readonly items: T[];
        constructor(name: string, items: T[]);
        save(dataPath: string): Promise<void>;
        readonly length: number;
    }
    export const makeTable: (name: string, values: string[][]) => Table<RecordType>;
}

declare module 'nadeshiko/sheets/Record' {
    import { Attribute, AttributeValueType } from 'nadeshiko/sheets/Attribute';
    import { Cell } from 'nadeshiko/sheets/Cell';
    export const INVALID_NUM_ID = -987654321;
    export const INVALID_STR_ID = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    export type RecordType = {
        id: number | string;
    } & {
        [key: string]: AttributeValueType;
    };
    export class Record {
        constructor(cells: Cell[]);
        readonly value: RecordType;
    }
    export const makeRecord: (attrs: Attribute[], row: string[]) => Record;
}

declare module 'nadeshiko/datasource' {
    export * from 'nadeshiko/datasource/base';
    export { GSheetDataSource } from 'nadeshiko/datasource/gsheet';
}

declare module 'nadeshiko/datasource/base' {
    import { Reference, Sheet } from 'nadeshiko/sheets';
    export interface DataSource {
        fetchReferences(): Promise<string[][]>;
        fetchConstraints(): Promise<string[][]>;
        fetchSheets(refs: Reference[]): Promise<Sheet[]>;
    }
}

declare module 'nadeshiko/sheets/Cell' {
    import { Attribute, AttributeType } from 'nadeshiko/sheets/Attribute';
    export class Cell {
        constructor(attr: Attribute, data: string);
        readonly value: string | number | boolean | Date | null | undefined;
        readonly key: string;
        readonly ty: AttributeType;
        readonly raw: string;
    }
}

